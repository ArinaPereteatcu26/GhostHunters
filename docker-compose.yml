
services:
  # --- MySQL for Inventory ---
  db_inventory:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${INV_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${INV_DB}
      MYSQL_USER: ${INV_DB_USER}
      MYSQL_PASSWORD: ${INV_DB_PASSWORD}
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${INV_MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      - inv_mysql_data:/var/lib/mysql
      - ./db/inventory.sql:/docker-entrypoint-initdb.d/001_inventory.sql:ro
    # (No host port needed; app talks over internal network)

  inventory:
    image: ${INV_IMAGE}     # e.g., dgliga/inventory-service:6
    environment:
      DATABASE_URL: "mysql+pymysql://${INV_DB_USER}:${INV_DB_PASSWORD}@db_inventory:3306/${INV_DB}?charset=utf8mb4"
      SEED_TOKEN: ${INV_SEED_TOKEN}
    depends_on:
      db_inventory:
        condition: service_healthy
    ports:
      - "8000:8000"         # Inventory API on http://localhost:8000
    restart: unless-stopped

  # --- MySQL for Chat ---
  db_chat:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${CHAT_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${CHAT_DB}
      MYSQL_USER: ${CHAT_DB_USER}
      MYSQL_PASSWORD: ${CHAT_DB_PASSWORD}
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${CHAT_MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      - chat_mysql_data:/var/lib/mysql
      - ./db/chat.sql:/docker-entrypoint-initdb.d/001_chat.sql:ro

  chat:
    image: ${CHAT_IMAGE}    # e.g., dgliga/chat-service:4
    environment:
      DATABASE_URL: "mysql+pymysql://${CHAT_DB_USER}:${CHAT_DB_PASSWORD}@db_chat:3306/${CHAT_DB}?charset=utf8mb4"
      SEED_TOKEN: ${CHAT_SEED_TOKEN}
    depends_on:
      db_chat:
        condition: service_healthy
    ports:
      - "8001:8000"         # Chat API on http://localhost:8001
    restart: unless-stopped

    # --- Postgres for Ghost Service ---
  ghost_postgres:
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 30
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/ghosts.sql:/docker-entrypoint-initdb.d/001_ghosts.sql:ro

  ghost-service:
    image: ${GHOST_IMAGE}
    env_file:
      - .env
    ports:
      - "4001:4001"
    depends_on:
      ghost_postgres:
        condition: service_healthy

  # --- Redis for Location Service ---
  location_redis:
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 30
    image: redis:7-alpine
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  location-service:
    image: ${LOCATION_IMAGE}
    env_file:
      - .env
    ports:
      - "4002:4002"
    depends_on:
      location_redis:
        condition: service_healthy




  # --- Postgres for Usermanagement Service ---
  postgres:
    image: postgres:15-alpine
    container_name: user_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - usermanagement_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      
  usermanagement-service:
    image: ${USERMANAGEMENT_IMAGE}
    container_name: usermanagement_service_main
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - ConnectionStrings__DefaultConnection=Host=${DB_HOST};Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}
    ports:
      - "5169:5169"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - usermanagement_network
    restart: unless-stopped
    
    # --- Postgres & Redis for GhostAi Service ---
    
  db:
    image: postgres:15-alpine
    container_name: ghost_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis_ghostai
    restart: always
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 5
      start_period: 5s

  ghostaiservice:
    image: ${GHOSTAI_IMAGE}
    container_name: ghostaiservice_main
    restart: always
    ports:
      - "8083:8080"
      - "8084:8081"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_CONNECTION_STRING: "Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      REDIS_CONNECTION_STRING: "redis:6381"  
    
  # --- Azure SQL Edge for Lobby Service ---
  lobby_sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${LOBBY_SA_PASSWORD}
    ports:
      - "${LOBBY_DB_PORT}:1433"
    volumes:
      - lobby_sqlserver_data:/var/opt/mssql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${LOBBY_SA_PASSWORD} -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 10

  lobbyservice:
    image: zagorodniuchka/lobbyservice:1.0
    ports:
      - "5144:80"
    depends_on:
      lobby_sqlserver:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Server=lobby_sqlserver;Database=${LOBBY_DB_NAME};User Id=${LOBBY_DB_USER};Password=${LOBBY_SA_PASSWORD}

  # --- Azure SQL Edge for Map Service ---
  map_sqlserver:
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${MAP_SA_PASSWORD}
    ports:
      - "${MAP_DB_PORT}:1433"
    volumes:
      - map_sqlserver_data:/var/opt/mssql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${MAP_SA_PASSWORD} -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 10

  mapservice:
    image: zagorodniuchka/mapservice:1.0
    ports:
      - "5035:80"
    depends_on:
      map_sqlserver:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Server=map_sqlserver;Database=${MAP_DB_NAME};User Id=${MAP_DB_USER};Password=${MAP_SA_PASSWORD}
    volumes:
      - ./init.sql:/app/init.sql


    # --- Postgres for Shop Service ---

  journal_db:
    image: postgres:15
    container_name: journal-db
    restart: always
    environment:
      POSTGRES_USER: ${JOURNAL_DB_USER}
      POSTGRES_PASSWORD: ${JOURNAL_DB_PASSWORD}
      POSTGRES_DB: ${JOURNAL_DB}
    volumes:
      - journal_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${JOURNAL_DB_USER} -d ${JOURNAL_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  journalservice:
    image: ${JOURNAL_IMAGE}
    container_name: journal-service
    restart: always
    ports:
      - "8003:8000"
    depends_on:
      journal_db:
        condition: service_healthy
    environment:
      DB_CONNECTION_STRING: "Host=journal_db;Port=5432;Database=${JOURNAL_DB};Username=${JOURNAL_DB_USER};Password=${JOURNAL_DB_PASSWORD}"

    # --- Postgres for Journal Service ---

  shop_db:
    image: postgres:15
    container_name: shop-db
    restart: always
    environment:
      POSTGRES_USER: ${SHOP_DB_USER}
      POSTGRES_PASSWORD: ${SHOP_DB_PASSWORD}
      POSTGRES_DB: ${SHOP_DB}
    volumes:
      - shop_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SHOP_DB_USER} -d ${SHOP_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  shopservice:
    image: ${SHOP_IMAGE}
    container_name: shop-service
    restart: always
    ports:
      - "8002:8000"
    depends_on:
      shop_db:
        condition: service_healthy
    environment:
      DB_CONNECTION_STRING: "Host=shop_db;Port=5432;Database=${SHOP_DB};Username=${SHOP_DB_USER};Password=${SHOP_DB_PASSWORD}"
    
volumes:
  inv_mysql_data:
  chat_mysql_data: 
  pgdata:
  redisdata:
  postgres_data:
  postgres_ghost_data:
  redis_data:
  lobby_sqlserver_data:
  map_sqlserver_data:
  journal_data:
  shop_data:
    
networks:
  usermanagement_network:
    driver: bridge




  



